import logging
import sys
import asyncio
from datetime import datetime, timezone, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes
)
import os
import json
import aiohttp 
import aiofiles
from dateutil import parser as dateparser
from aiohttp import ClientPayloadError
from aiohttp.http_exceptions import TransferEncodingError
import feedparser  # Новый импорт

# Включаем логирование
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
ADMIN_CHAT_ID = '1404964913'
TELEGRAM_BOT_TOKEN = '7251203711:AAH7a6m3QxPFJlduIfIQvSWaLD4UfKbrAC'

# Глобальный список источников новостей
NEWS_SOURCES = [
    'https://9to5google.com/feed/',
    'https://www.independent.co.uk/topic/google/rss',
    'https://feeds.macrumors.com/MacRumors-All',
    'https://www.independent.co.uk/topic/apple/rss',
    'https://9to5mac.com/feed/',
    'https://developer.samsung.com/feed',
    'https://news.samsung.com/global/feed',
    'https://www.reddit.com/r/oneui/.rss',
    'https://www.reddit.com/r/GalaxyWatch/.rss',
    'https://www.sammobile.com/feed/',
    'https://www.gsmarena.com/rss-news-reviews.php3',
    'https://www.reutersagency.com/feed/',
    'https://www.cnet.com/rss/news/',
    'https://www.theverge.com/google/rss/index.xml',
    'https://www.theverge.com/apple/rss/index.xml',
    'https://www.theverge.com/rss/samsung/index.xml',
    'https://www.gadgets360.com/rss/news',
    'https://techcrunch.com/feed/',
    'https://developer.apple.com/news/rss/news.rss',
    'https://www.zdnet.com/news/rss.xml'
]

SENT_ARTICLES_FILE = 'sent_articles.json'
KEYWORDS_FILE = 'user_keywords.json'

# Состояния для ConversationHandler
ADD_KEYWORD, CONFIRM_MORE, DELETE_KEYWORD, BROADCAST_MESSAGE = range(4)

# Словари для хранения данных
user_keywords = {}
sent_articles = {}

# Асинхронная загрузка JSON файлов
async def load_json_file_async(filename, default):
    if os.path.exists(filename):
        try:
            async with aiofiles.open(filename, 'r', encoding='utf-8') as f:
                data = await f.read()
                return json.loads(data)
        except Exception as e:
            logging.error(f"Ошибка при асинхронной загрузке {filename}: {e}")
            return default
    return default

# Асинхронное сохранение JSON файлов
async def save_json_file_async(data, filename):
    try:
        async with aiofiles.open(filename, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(data, ensure_ascii=False, indent=4))
        logging.info(f"Данные сохранены в файл {filename}.")
    except Exception as e:
        logging.error(f"Ошибка при асинхронном сохранении в файл {filename}: {e}")

# Асинхронная загрузка времени последней проверки
async def load_last_checked_async(chat_id):
    """Загружаем время последней проверки для определенного пользователя."""
    last_checked_file = f'{chat_id}_last_checked.txt'
    try:
        if os.path.exists(last_checked_file):
            async with aiofiles.open(last_checked_file, 'r', encoding='utf-8') as file:
                timestamp = await file.read()
                timestamp = timestamp.strip()
                last_checked = datetime.fromisoformat(timestamp)
                if last_checked.tzinfo is None:
                    last_checked = last_checked.replace(tzinfo=timezone.utc)
                return last_checked
    except Exception as e:
        logging.error(f"Ошибка при асинхронной загрузке времени последней проверки для {chat_id}: {e}")
    return datetime.now(timezone.utc)

# Асинхронное сохранение времени последней проверки
async def save_last_checked_async(chat_id, timestamp):
    """Сохраняем время последней проверки для определенного пользователя."""
    last_checked_file = f'{chat_id}_last_checked.txt'
    try:
        async with aiofiles.open(last_checked_file, 'w', encoding='utf-8') as file:
            await file.write(timestamp.isoformat())
    except Exception as e:
        logging.error(f"Ошибка при асинхронном сохранении времени последней проверки для {chat_id}: {e}")

def parse_pub_date(pub_date_str):
    """Разбор строки даты публикации с использованием dateutil.parser и tzinfos."""
    try:
        # Определяем словарь часовых поясов
        tzinfos = {
            'PDT': timezone(timedelta(hours=-7)),  # Pacific Daylight Time
            'PST': timezone(timedelta(hours=-8)),  # Pacific Standard Time
            'EDT': timezone(timedelta(hours=-4)),  # Eastern Daylight Time
            'EST': timezone(timedelta(hours=-5)),  # Eastern Standard Time
            # Добавьте другие необходимые часовые пояса
        }
        pub_date = dateparser.parse(pub_date_str, tzinfos=tzinfos)
        if pub_date.tzinfo is None:
            pub_date = pub_date.replace(tzinfo=timezone.utc)
        return pub_date
    except Exception as e:
        logging.warning(f"Не удалось распознать дату: {pub_date_str} ({e})")
        return datetime.now(timezone.utc)

async def fetch_and_process_feeds(context: ContextTypes.DEFAULT_TYPE):
    """Асинхронно обрабатывает RSS-ленты и отправляет новые статьи пользователям."""
    logging.info("Начало проверки новых статей...")

    # Инициализируем семафор для ограничения количества одновременных запросов
    semaphore = asyncio.Semaphore(3)

    # Загружаем отправленные статьи и ключевые слова пользователей
    sent_articles = await load_json_file_async(SENT_ARTICLES_FILE, {})
    sent_articles = {chat_id: set(articles) for chat_id, articles in sent_articles.items()}

    global user_keywords
    if not user_keywords:
        user_keywords = await load_json_file_async(KEYWORDS_FILE, {})

    # Создаем сессию aiohttp с ограничением на количество соединений
    connector = aiohttp.TCPConnector(limit=10)
    async with aiohttp.ClientSession(connector=connector) as session:
        tasks = []
        for url in NEWS_SOURCES:
            tasks.append(process_feed(url, session, semaphore, context, sent_articles))
        await asyncio.gather(*tasks)

    # Сохраняем обновленные отправленные статьи
    # Преобразуем множества обратно в списки перед сохранением
    sent_articles_to_save = {chat_id: list(articles) for chat_id, articles in sent_articles.items()}
    await save_json_file_async(sent_articles_to_save, SENT_ARTICLES_FILE)

async def process_feed(url, session, semaphore, context, sent_articles):
    """Асинхронно загружает и обрабатывает одну RSS-ленту."""
    async with semaphore:
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'close'
            }
            timeout = aiohttp.ClientTimeout(total=30)
            async with session.get(url, headers=headers, timeout=timeout, allow_redirects=True) as response:
                if response.status == 200:
                    response_content = await response.read()
                    feed = feedparser.parse(response_content)
                    if 'entries' not in feed:
                        logging.warning(f"Нет записей в RSS-ленте {url}.")
                        return
                    else:
                        for entry in feed.entries:
                            await process_entry(entry, context, sent_articles)
                elif response.status == 429:
                    logging.warning(f"Получен статус 429 для {url}. Пропускаем этот источник в текущей итерации.")
                else:
                    logging.error(f"Ошибка при получении RSS-ленты по URL {url}: Статус {response.status}")
        except TransferEncodingError as e:
            logging.error(f"Ошибка передачи данных при обработке RSS-ленты по URL {url}: {e}")
        except ClientPayloadError as e:
            logging.error(f"Ошибка при обработке RSS-ленты по URL {url}: {e}")
        except Exception as e:
            logging.error(f"Ошибка при обработке RSS-ленты по URL {url}: {e}")

async def process_entry(entry, context, sent_articles):
    """Обрабатывает одну статью из RSS-ленты."""
    title = entry.title if 'title' in entry else 'Без заголовка'
    link = entry.link if 'link' in entry else ''
    pub_date_str = entry.published if 'published' in entry else ''

    if not link:
        return

    pub_date = parse_pub_date(pub_date_str) if pub_date_str else datetime.now(timezone.utc)
    if pub_date.tzinfo is None:
        pub_date = pub_date.replace(tzinfo=timezone.utc)

    # Создаем структуру статьи
    article = {
        'title': title,
        'link': link,
        'pub_date': pub_date
    }

    # Проходим по всем пользователям и сразу отправляем статью, если она подходит
    for chat_id, keywords in user_keywords.items():
        last_checked = await load_last_checked_async(chat_id)
        if article['pub_date'] > last_checked and article['link'] not in sent_articles.get(chat_id, set()):
            if any(keyword.lower() in article['title'].lower() for keyword in keywords):
                message = f"*{article['title']}*\n[Читать далее]({article['link']})"
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode='Markdown',
                        disable_web_page_preview=False
                    )
                    logging.info(f"Отправлена статья '{article['title']}' пользователю {chat_id}")
                    sent_articles.setdefault(chat_id, set()).add(article['link'])
                    await save_last_checked_async(chat_id, article['pub_date'])
                except Exception as e:
                    logging.error(f"Ошибка отправки статьи пользователю {chat_id}: {e}")

# Команды для работы с ключевыми словами
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ответ на команду /start."""
    chat_id = str(update.message.chat_id)
    if chat_id not in user_keywords:
        user_keywords[chat_id] = []
    await update.message.reply_text(
        'Добро пожаловать! Вы можете добавить ключевые слова с помощью команды /add_keyword.'
    )

# Диалог для добавления ключевых слов
async def add_keyword_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Начало процесса добавления ключевого слова."""
    await update.message.reply_text(
        "Какое ключевое слово вы хотите добавить?",
        reply_markup=ReplyKeyboardRemove()
    )
    return ADD_KEYWORD

async def add_keyword_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Добавление ключевого слова после ввода."""
    chat_id = str(update.message.chat_id)
    keyword = update.message.text.strip().lower()

    if chat_id not in user_keywords:
        user_keywords[chat_id] = []

    user_keywords[chat_id].append(keyword)
    await save_json_file_async(user_keywords, KEYWORDS_FILE)

    await update.message.reply_text(f"Ключевое слово '{keyword}' добавлено.")

    reply_keyboard = [['Да', 'Нет']]
    await update.message.reply_text(
        "Хотите добавить ещё одно ключевое слово?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return CONFIRM_MORE

async def add_keyword_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Обработка ответа на вопрос о добавлении ещё одного слова."""
    if update.message.text.lower() == 'да':
        await update.message.reply_text("Введите новое ключевое слово:", reply_markup=ReplyKeyboardRemove())
        return ADD_KEYWORD
    else:
        await update.message.reply_text("Добавление ключевых слов завершено.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

# Диалог для удаления ключевых слов
async def delete_keyword_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Начало процесса удаления ключевого слова."""
    chat_id = str(update.message.chat_id)

    if chat_id not in user_keywords or not user_keywords[chat_id]:
        await update.message.reply_text("У вас нет сохраненных ключевых слов для удаления.")
        return ConversationHandler.END

    keywords_list = user_keywords[chat_id]
    keyword_message = "\n".join([f"{i+1}. {kw}" for i, kw in enumerate(keywords_list)])
    await update.message.reply_text(f"Ваши ключевые слова:\n{keyword_message}\n\nВведите номер ключевого слова для удаления.")
    return DELETE_KEYWORD

async def delete_keyword_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Удаление ключевого слова после ввода номера."""
    chat_id = str(update.message.chat_id)
    try:
        keyword_index = int(update.message.text.strip()) - 1
        keywords_list = user_keywords[chat_id]

        if keyword_index < 0 or keyword_index >= len(keywords_list):
            await update.message.reply_text("Неверный номер ключевого слова. Пожалуйста, попробуйте снова.")
            return DELETE_KEYWORD

        removed_keyword = keywords_list.pop(keyword_index)
        await save_json_file_async(user_keywords, KEYWORDS_FILE)
        await update.message.reply_text(f"Ключевое слово '{removed_keyword}' удалено.", reply_markup=ReplyKeyboardRemove())
    except ValueError:
        await update.message.reply_text("Пожалуйста, введите корректный номер ключевого слова.")
        return DELETE_KEYWORD

    return ConversationHandler.END

# Отмена действия
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Отмена текущего диалога."""
    await update.message.reply_text('Действие отменено.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# Команда /broadcast
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Начало процесса отправки сообщения всем пользователям (только для администратора)."""
    chat_id = str(update.message.chat_id)
    if chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("Извините, эта команда доступна только администратору.")
        return ConversationHandler.END

    await update.message.reply_text(
        "Введите сообщение для рассылки всем пользователям или отправьте изображение:",
        reply_markup=ReplyKeyboardRemove()
    )
    return BROADCAST_MESSAGE

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Отправка сообщения или изображения всем пользователям."""
    chat_id = str(update.message.chat_id)
    if chat_id != ADMIN_CHAT_ID:
        await update.message.reply_text("Извините, эта команда доступна только администратору.")
        return ConversationHandler.END

    broadcast_message = update.message.text
    photo = update.message.photo[-1].file_id if update.message.photo else None

    send_tasks = []
    for user_chat_id in user_keywords.keys():
        send_tasks.append(send_broadcast_message(context.bot, user_chat_id, broadcast_message, photo))

    await asyncio.gather(*send_tasks)

    await update.message.reply_text("Сообщение отправлено всем пользователям.")
    return ConversationHandler.END

async def send_broadcast_message(bot, chat_id, message, photo):
    """Отправляет сообщение или изображение одному пользователю."""
    try:
        if photo and message:
            await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=message
            )
        elif photo:
            await bot.send_photo(
                chat_id=chat_id,
                photo=photo
            )
        elif message:
            await bot.send_message(
                chat_id=chat_id,
                text=message
            )
        logging.info(f"Отправлено сообщение пользователю {chat_id}")
    except Exception as e:
        logging.error(f"Ошибка отправки сообщения пользователю {chat_id}: {e}")

# Основная функция для запуска бота
def main():
    global user_keywords

    # Создаем новый цикл событий
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    user_keywords = loop.run_until_complete(load_json_file_async(KEYWORDS_FILE, {}))

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Определение ConversationHandler для добавления ключевого слова
    add_keyword_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('add_keyword', add_keyword_start)],
        states={
            ADD_KEYWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_keyword_finish)],
            CONFIRM_MORE: [MessageHandler(filters.Regex('^(Да|Нет)$'), add_keyword_more)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Определение ConversationHandler для удаления ключевого слова
    delete_keyword_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('delete_keyword', delete_keyword_start)],
        states={
            DELETE_KEYWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_keyword_finish)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Определение ConversationHandler для команды /broadcast
    broadcast_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('broadcast', broadcast_start)],
        states={
            BROADCAST_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_send),
                MessageHandler(filters.PHOTO, broadcast_send),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(add_keyword_conv_handler)
    application.add_handler(delete_keyword_conv_handler)
    application.add_handler(broadcast_conv_handler)

    # Добавляем задачу для регулярной проверки новостей
    application.job_queue.run_repeating(
        fetch_and_process_feeds,
        interval=60,  # 1 минута
        first=30,
        name='fetch_and_process_feeds'
    )

    # Запуск бота
    application.run_polling()

if __name__ == '__main__':
    main()